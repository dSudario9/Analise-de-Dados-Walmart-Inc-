# -*- coding: utf-8 -*-
"""Day 6 - Parte da tarde - Grupo 01 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-4Ja5pKKBmYyKXWf8O7G3H7D-MrKgtvo

## Day 06 - Previsão de Faturamento - Grupo 01

<li>770 - Higor Jesus
<li>1614 - Guilherme Fernandes De Mattos
<li>5716 - Dorian Sudário Da Silva
<li>4313 - Carlos Eduardo Cruz Yohei
<li>5684 - Gustavo Dos Santos Silvestre
<li>278 - Sérgio Henrique De Carvalho Pedroso
<li>4220 - Leonardo De Magalhães Lecques
"""

!pip install pandas-profiling==2.7.1

import pandas as pd
import numpy as np
import seaborn as sns 
import matplotlib.pyplot as plt 


from pandas_profiling import ProfileReport
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import MinMaxScaler 
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor 
from sklearn.linear_model import HuberRegressor, SGDRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error   
from sklearn.model_selection import GridSearchCV

GradientBoostingRegressor()

pasta_raiz = "/content/drive/MyDrive/Colab Notebooks/Day_06/"

from google.colab import drive
drive.mount('/content/drive')

df_features = pd.read_csv(f"{pasta_raiz}/features.csv")
df_stores = pd.read_csv(f"{pasta_raiz}/stores.csv")
df_train = pd.read_csv(f"{pasta_raiz}/train.csv")

df_features.head(5)

df_stores.head(5)

df_train.head(5)

print(df_features.shape)
print(df_stores.shape)
print(df_train.shape)

df_join_1 = pd.merge(df_train, df_features, on=['Store','Date'])
df_join_1.shape

df_join_final = pd.merge(df_join_1, df_stores, on=['Store'])
df_join_final.shape

df_join_final.head(10)

profile = ProfileReport(df_join_final, minimal=True)
profile

df_join_final.info()

"""## Limpeza de dados"""

df_join_final.isnull().sum()

df_join_final.fillna(0,inplace=True)
df_join_final.isnull().sum()

df_join_final = df_join_final.drop(["IsHoliday_y"], axis=1)
df_join_final.isnull().sum()

df_join_final['IsHoliday_x'].replace(to_replace=False,value=0,inplace=True)
df_join_final['IsHoliday_x'].replace(to_replace=True,value=1,inplace=True)  
df_join_final = pd.get_dummies(df_join_final,columns=['Type'])
df_join_final['IsHoliday_x'].replace(to_replace=False,value=0,inplace=True)

#transforma a data no indice
df_join_final.set_index(['Date'],inplace=True)

df_join_final.info()

df_join_final.head(100)

df_join_final.boxplot(column="Weekly_Sales")

df_join_final["Weekly_Sales"].describe(percentiles=[0.01,0.1,0.25,0.50,0.75,0.90,0.99])

#df_join_final[df_join_final["Weekly_Sales"]>693099]
df_join_final[df_join_final["Weekly_Sales"]<-4000]

fig = plt.figure(figsize=(20,10)) 
sns.barplot(x='Store',y='Weekly_Sales',data=df_join_final)

"""## Separar Dados (Micro) e Treinar modelo"""

df_micro = df_join_final.sample(frac=0.2)
df_micro.shape

X=df_micro.drop(columns='Weekly_Sales')
Y=df_micro['Weekly_Sales']

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

scaler = MinMaxScaler().fit(X_train)

X_trainS = scaler.transform(X_train)
X_testS = scaler.transform(X_test)

X_train = pd.DataFrame(X_trainS,columns = X_train.columns)
X_test = pd.DataFrame(X_testS,columns = X_test.columns)

"""<li>a. Linear Regression
<li>b. SGDRegressor
<li>c. GradientBoostingRegressor
<li>d. ExtraTreesRegressor
<li>e. RandomForestRegressor
<li>f. HuberReg 
"""

def apply_model(reg):
  model = reg.fit(X_train,y_train)
  y_pred = model.predict(X_test)
  b = 'R2: {:.2f}'.format(r2_score(y_test,y_pred))
  c = 'MAE: {:.2f}'.format(mean_absolute_error(y_test,y_pred))
  d = 'MSRE: {:.2f}'.format(np.square(mean_squared_error(y_test,y_pred)))
  return print(f'{b}\n {c}\n {d}')

a=LinearRegression()
b=SGDRegressor()
c=GradientBoostingRegressor()
d=ExtraTreesRegressor()
e=RandomForestRegressor()
f=HuberRegressor()



"""Após testar todos os modelos, foi selecionado o Gradient Boosting Regressor"""

#print("Linear Regression\n"),(apply_model(a))
#print("\n SGD Regressor\n"),(apply_model(b))
print("\n Gradient Boosting Regressor\n"),(apply_model(c))
#print("\n Extra Trees Regressor\n"),(apply_model(d))
#print("\n Random Forest Regressor\n"),(apply_model(e))
#print("\n Huber Regresso\n"),(apply_model(f))

